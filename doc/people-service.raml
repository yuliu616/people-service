#%RAML 1.0
title: people-service REST API
version: 1.0.x
description: |
  provide admin function for managing people info
securitySchemes:
  Bearer Token in this pattern: `Bearer ${access_token}`.
types:
  LocalDate:
    description: date without time, formatted like this `2017-10-24`.
  DateTime:
    description: instant of time without time zone concept.
  CountDto:
    examples:
      simple:
        {
          "count": 2000
        }
  People:
    type: object
    examples:
      simple:
        {
          "id": "33007",
          "version": 1,
          "creationDate": "2021-01-13T03:58:49Z",
          "lastUpdated": "2021-01-13T03:58:49Z",
          "nickname": "Johnson",
          "gender": "MALE",
          "dateOfBirth": "1995-07-24",
          "firstName": "Johnson",
          "lastName": "Li",
          "heightInCm": 162.00,
          "weightInKg": 65.1000,
          "active": true
        }

baseUri: http://localhost:8082/api/1.0

/about:
  get:
    queryParameters:
      printLog:
        type: boolean
        default: true
      printLogTest:
        type: boolean
        default: false
    response:
      200:
        body:
          application/json:
            type: object
            example: |
              {
                  "serviceName": "people-service"
                  "apiVersion": "1.0",
                  "apiBaseUrl": "/api/1.0",
                  "currentTime": "2020-11-30T02:43:11.856543Z",
                  "currentDate": "2020-11-30",
                  "description": "first version.",
                  "instanceRandId": 15507,
              }
/people:
  get:
    description: |
      list all people.
    queryParameters: 
      offset: integer
      size: integer
      isActive: 
        type: integer
        description: |
          "0" for false,
          "1" for true,
          "-1" for anything.
      idMin:
        type: integer
        description: filter condition, lower bound of field `id` (inclusive).
      idMax:
        type: integer
        description: filter condition, upper bound of field `id` (exclusive).
      creationDateMin:
        type: DateTime
        description: filter condition, lower bound of field `creationDate` (inclusive).
      creationDateMax:
        type: DateTime
        description: filter condition, upper bound of field `creationDate` (exclusive).
      lastUpdatedMin:
        type: DateTime
        description: filter condition, lower bound of field `lastUpdated` (inclusive).
      lastUpdatedMax:
        type: DateTime
        description: filter condition, upper bound of field `lastUpdated` (exclusive).
    responses: 
      200:
        body:
          application/json:
            type: People[]
  post:
    description: |
      create new people with the posted data.
    body: 
      application/json:
        type: People
    responses: 
      200:
        body:
          application/json:
            description: the newly created People
            type: People
  /search:
    /withIdList:
      get: |
        find all people with provided id (any of it).
      queryParameters:
        type: string
        description: |
          list of people Id separated by comma (,).
      responses:
        200:
          body:
            application/json:
              type: People[]
    /withNameSimilarTo:
      get:
        description: |
          find all people that name match the provided pattern
        queryParameters:
          namePattern:
            type: string
            description: |
              pattern (in regex) to search for people,
              all name related fields will be searched.
          offset: integer
          size: integer
          idMin:
            type: integer
            description: filter condition, lower bound of field `id` (inclusive).
          idMax:
            type: integer
            description: filter condition, upper bound of field `id` (exclusive).
          creationDateMin:
            type: DateTime
            description: filter condition, lower bound of field `creationDate` (inclusive).
          creationDateMax:
            type: DateTime
            description: filter condition, upper bound of field `creationDate` (exclusive).
          lastUpdatedMin:
            type: DateTime
            description: filter condition, lower bound of field `lastUpdated` (inclusive).
          lastUpdatedMax:
            type: DateTime
            description: filter condition, upper bound of field `lastUpdated` (exclusive).
        responses:
          200:
            body:
              application/json:
                type: People[]
  /count:
    get:
      description: |
        get count of People.
      queryParameters:
        isActive: 
          type: integer
          description: |
            "0" for false,
            "1" for true,
            "-1" for anything.
        idMin:
          type: integer
          description: filter condition, lower bound of field `id` (inclusive).
        idMax:
          type: integer
          description: filter condition, upper bound of field `id` (exclusive).
        creationDateMin:
          type: DateTime
          description: filter condition, lower bound of field `creationDate` (inclusive).
        creationDateMax:
          type: DateTime
          description: filter condition, upper bound of field `creationDate` (exclusive).
        lastUpdatedMin:
          type: DateTime
          description: filter condition, lower bound of field `lastUpdated` (inclusive).
        lastUpdatedMax:
          type: DateTime
          description: filter condition, upper bound of field `lastUpdated` (exclusive).
      responses:
        200:
          body:
            application/json:
              type: CountDto
  /{id}:
    get:
      description: |
        get People with target ID.
      responses:
        200:
          body:
            application/json:
              type: People
    put:
      description: |
        update People with target ID.
      body: 
        application/json:
          type: People
      responses:
        200:
          body:
            application/json:
              type: People
/dict:
  /Gender:
    get:
      description: |
        list all Gender (enum).
      responses: 
        200:
          body:
            application/json:
              type: string[]
